version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: orchestrator-postgres
    environment:
      POSTGRES_DB: orchestrator
      POSTGRES_USER: orchestrator_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-orchestrator_pass}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - orchestrator-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orchestrator_user -d orchestrator"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis para cache e sess√µes
  redis:
    image: redis:7-alpine
    container_name: orchestrator-redis
    ports:
      - "6379:6379"
    networks:
      - orchestrator-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Enhanced Stream Orchestrator
  orchestrator:
    build:
      context: .
      dockerfile: Dockerfile.orchestrator.new
    container_name: enhanced-orchestrator
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: orchestrator
      DB_USER: orchestrator_user
      DB_PASSWORD: ${DB_PASSWORD:-orchestrator_pass}
      
      # Application Configuration
      ORCHESTRATOR_PORT: 8000
      ORCHESTRATOR_HOST: 0.0.0.0
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      MAX_WORKERS: ${MAX_WORKERS:-1}
      
      # Performance Tuning
      IMBALANCE_THRESHOLD: ${IMBALANCE_THRESHOLD:-0.2}
      MAX_STREAM_DIFFERENCE: ${MAX_STREAM_DIFFERENCE:-2}
      HEARTBEAT_TIMEOUT: ${HEARTBEAT_TIMEOUT:-300}
      HEARTBEAT_WARNING_THRESHOLD: ${HEARTBEAT_WARNING_THRESHOLD:-120}
      MAX_MISSED_HEARTBEATS: ${MAX_MISSED_HEARTBEATS:-3}
      MAX_RETRY_ATTEMPTS: ${MAX_RETRY_ATTEMPTS:-3}
      RETRY_DELAY_SECONDS: ${RETRY_DELAY_SECONDS:-5}
      EXPONENTIAL_BACKOFF: ${EXPONENTIAL_BACKOFF:-true}
      
      # Feature Flags
      RUN_MIGRATIONS: ${RUN_MIGRATIONS:-true}
      RUN_HEALTH_CHECK: ${RUN_HEALTH_CHECK:-true}
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      
    ports:
      - "8000:8000"
    volumes:
      - orchestrator_logs:/app/logs
      - orchestrator_data:/app/data
    networks:
      - orchestrator-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "/app/app/health_check.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
  orchestrator_logs:
  orchestrator_data:

networks:
  orchestrator-network:
    driver: bridge