#!/usr/bin/env python3
"""
Script para corrigir a configura√ß√£o MAX_STREAMS_PER_INSTANCE no orquestrador
Garante que todas as inst√¢ncias sejam registradas com max_streams=20
"""

import json
import os
import sys
from datetime import datetime
from typing import Dict, List, Optional

import psycopg2
import requests

# Configura√ß√µes do banco
POSTGRES_CONFIG = {
    'host': os.getenv('POSTGRES_HOST', '104.234.173.96'),
    'user': os.getenv('POSTGRES_USER', 'postgres'),
    'password': os.getenv('POSTGRES_PASSWORD', 'Conquista@@2'),
    'database': os.getenv('POSTGRES_DB', 'music_log'),
    'port': int(os.getenv('POSTGRES_PORT', 5432))
}

ORCHESTRATOR_URL = os.getenv('ORCHESTRATOR_URL', 'http://n8n-pontocom-finger-orchestrator.azfa0v.easypanel.host:8080')

def get_db_connection():
    """Conecta ao banco de dados"""
    try:
        return psycopg2.connect(**POSTGRES_CONFIG)
    except Exception as e:
        print(f"‚ùå Erro ao conectar ao banco: {e}")
        return None

def check_current_state():
    """Verifica o estado atual das inst√¢ncias"""
    print("\nüîç VERIFICANDO ESTADO ATUAL DAS INST√ÇNCIAS")
    print("=" * 60)
    
    conn = get_db_connection()
    if not conn:
        return []
    
    try:
        cursor = conn.cursor()
        
        # Buscar todas as inst√¢ncias ativas
        cursor.execute("""
            SELECT server_id, ip, port, max_streams, current_streams, 
                   status, last_heartbeat,
                   EXTRACT(EPOCH FROM (NOW() - last_heartbeat)) as seconds_since_heartbeat
            FROM orchestrator_instances 
            WHERE status = 'active'
            ORDER BY last_heartbeat DESC
        """)
        
        instances = cursor.fetchall()
        print(f"üìä Inst√¢ncias ativas encontradas: {len(instances)}")
        
        problem_instances = []
        
        for instance in instances:
            server_id, ip, port, max_streams, current_streams, status, last_heartbeat, seconds_since = instance
            
            print(f"\nüìç Inst√¢ncia {server_id}:")
            print(f"   - Endere√ßo: {ip}:{port}")
            print(f"   - Max streams: {max_streams}")
            print(f"   - Current streams: {current_streams}")
            print(f"   - √öltimo heartbeat: {int(seconds_since)}s atr√°s")
            
            # Verificar se max_streams est√° incorreto
            if max_streams != 20:
                problem_instances.append({
                    'server_id': server_id,
                    'current_max_streams': max_streams,
                    'current_streams': current_streams
                })
                print(f"   ‚ö†Ô∏è  PROBLEMA: max_streams={max_streams} (esperado=20)")
            else:
                print(f"   ‚úÖ max_streams correto: {max_streams}")
        
        return problem_instances
        
    except Exception as e:
        print(f"‚ùå Erro ao consultar banco: {e}")
        return []
    finally:
        conn.close()

def fix_max_streams_in_database(problem_instances):
    """Corrige max_streams diretamente no banco de dados"""
    if not problem_instances:
        print("\n‚úÖ Nenhuma corre√ß√£o necess√°ria no banco de dados")
        return True
    
    print(f"\nüîß CORRIGINDO {len(problem_instances)} INST√ÇNCIAS NO BANCO")
    print("=" * 60)
    
    conn = get_db_connection()
    if not conn:
        return False
    
    try:
        cursor = conn.cursor()
        
        for instance in problem_instances:
            server_id = instance['server_id']
            old_max = instance['current_max_streams']
            
            print(f"\nüîÑ Corrigindo inst√¢ncia {server_id}:")
            print(f"   - max_streams: {old_max} ‚Üí 20")
            
            # Atualizar max_streams para 20
            cursor.execute("""
                UPDATE orchestrator_instances 
                SET max_streams = 20
                WHERE server_id = %s
            """, (server_id,))
            
            if cursor.rowcount > 0:
                print(f"   ‚úÖ Atualizado com sucesso")
            else:
                print(f"   ‚ùå Falha na atualiza√ß√£o")
        
        conn.commit()
        print(f"\n‚úÖ Todas as corre√ß√µes foram aplicadas no banco")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao corrigir banco: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()

def verify_orchestrator_config():
    """Verifica se o orquestrador est√° usando a configura√ß√£o correta"""
    print("\n‚öôÔ∏è  VERIFICANDO CONFIGURA√á√ÉO DO ORQUESTRADOR")
    print("=" * 60)
    
    try:
        # Tentar acessar endpoint de health para verificar se est√° rodando
        response = requests.get(f"{ORCHESTRATOR_URL}/health", timeout=5)
        print(f"‚úÖ Orquestrador acess√≠vel: {response.status_code}")
        
        # Verificar se h√° algum endpoint que mostra a configura√ß√£o
        try:
            response = requests.get(f"{ORCHESTRATOR_URL}/config", timeout=5)
            if response.status_code == 200:
                config = response.json()
                print(f"üìä Configura√ß√£o do orquestrador: {config}")
        except:
            print("‚ÑπÔ∏è  Endpoint /config n√£o dispon√≠vel")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro ao acessar orquestrador: {e}")
        return False
    
    return True

def test_instance_registration():
    """Testa se novas inst√¢ncias s√£o registradas com max_streams=20"""
    print("\nüß™ TESTANDO REGISTRO DE NOVA INST√ÇNCIA")
    print("=" * 60)
    
    test_data = {
        "server_id": "test_max_streams_fix",
        "ip": "127.0.0.1",
        "port": 9998,
        "max_streams": 20
    }
    
    try:
        # Tentar registrar inst√¢ncia de teste
        response = requests.post(
            f"{ORCHESTRATOR_URL}/register",
            json=test_data,
            timeout=10
        )
        
        print(f"üì§ Enviando registro: {test_data}")
        print(f"üì• Resposta: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Registro bem-sucedido: {result}")
            
            # Verificar no banco se foi registrado corretamente
            conn = get_db_connection()
            if conn:
                try:
                    cursor = conn.cursor()
                    cursor.execute("""
                        SELECT max_streams FROM orchestrator_instances 
                        WHERE server_id = %s
                    """, (test_data['server_id'],))
                    
                    result = cursor.fetchone()
                    if result:
                        max_streams_db = result[0]
                        print(f"üìä max_streams no banco: {max_streams_db}")
                        
                        if max_streams_db == 20:
                            print(f"‚úÖ Inst√¢ncia registrada corretamente com max_streams=20")
                        else:
                            print(f"‚ùå PROBLEMA: Registrada com max_streams={max_streams_db}")
                    else:
                        print(f"‚ùå Inst√¢ncia n√£o encontrada no banco")
                        
                    # Limpar inst√¢ncia de teste
                    cursor.execute("""
                        DELETE FROM orchestrator_instances 
                        WHERE server_id = %s
                    """, (test_data['server_id'],))
                    conn.commit()
                    print(f"üßπ Inst√¢ncia de teste removida")
                    
                except Exception as e:
                    print(f"‚ùå Erro ao verificar banco: {e}")
                finally:
                    conn.close()
        else:
            print(f"‚ùå Falha no registro: {response.text}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro na comunica√ß√£o: {e}")

def force_rebalance():
    """For√ßa um rebalanceamento ap√≥s as corre√ß√µes"""
    print("\nüîÑ FOR√áANDO REBALANCEAMENTO")
    print("=" * 60)
    
    try:
        response = requests.post(f"{ORCHESTRATOR_URL}/force-rebalance", timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Rebalanceamento iniciado: {result}")
        else:
            print(f"‚ùå Falha no rebalanceamento: {response.status_code} - {response.text}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro ao for√ßar rebalanceamento: {e}")

def main():
    """Fun√ß√£o principal"""
    print("üîß CORRE√á√ÉO: MAX_STREAMS_PER_INSTANCE = 20")
    print("=" * 80)
    print(f"‚è∞ Executado em: {datetime.now()}")
    
    # 1. Verificar estado atual
    problem_instances = check_current_state()
    
    # 2. Verificar configura√ß√£o do orquestrador
    if not verify_orchestrator_config():
        print("\n‚ùå FALHA CR√çTICA: Orquestrador n√£o acess√≠vel")
        return
    
    # 3. Corrigir inst√¢ncias com max_streams incorreto
    if not fix_max_streams_in_database(problem_instances):
        print("\n‚ùå FALHA: N√£o foi poss√≠vel corrigir o banco de dados")
        return
    
    # 4. Testar registro de nova inst√¢ncia
    test_instance_registration()
    
    # 5. For√ßar rebalanceamento
    force_rebalance()
    
    # 6. Verificar estado final
    print("\nüîç VERIFICA√á√ÉO FINAL")
    print("=" * 60)
    final_problems = check_current_state()
    
    if not final_problems:
        print("\nüéâ SUCESSO: Todas as inst√¢ncias agora t√™m max_streams=20")
    else:
        print(f"\n‚ö†Ô∏è  ATEN√á√ÉO: Ainda h√° {len(final_problems)} inst√¢ncias com problemas")
    
    print("\n" + "=" * 80)
    print("üèÅ CORRE√á√ÉO CONCLU√çDA")

if __name__ == "__main__":
    main()