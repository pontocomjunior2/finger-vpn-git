#!/usr/bin/env python3
import asyncio
import subprocess
import time
import os
import signal
import psutil
from dotenv import load_dotenv

load_dotenv()

def find_fingerv7_process():
    """Encontra o processo do fingerv7 se estiver rodando."""
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if proc.info['name'] == 'python.exe' and proc.info['cmdline']:
                cmdline = ' '.join(proc.info['cmdline'])
                if 'fingerv7.py' in cmdline:
                    return proc.info['pid']
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return None

def stop_fingerv7():
    """Para o fingerv7 se estiver rodando."""
    pid = find_fingerv7_process()
    if pid:
        try:
            print(f"   Parando processo fingerv7 (PID: {pid})...")
            proc = psutil.Process(pid)
            proc.terminate()
            proc.wait(timeout=10)
            print("   ‚úÖ Processo parado com sucesso")
            return True
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Erro ao parar processo: {e}")
            return False
    else:
        print("   ‚úÖ Nenhum processo fingerv7 encontrado")
        return True

async def test_fingerv7_startup():
    """Testa a inicializa√ß√£o do fingerv7 com a corre√ß√£o aplicada."""
    
    print("=== TESTE DE INICIALIZA√á√ÉO DO FINGERV7 ===")
    
    try:
        # 1. Parar qualquer inst√¢ncia existente
        print("\n1. Verificando processos existentes...")
        stop_success = stop_fingerv7()
        if not stop_success:
            print("   ‚ö†Ô∏è  N√£o foi poss√≠vel parar processo existente")
        
        # Aguardar um pouco
        await asyncio.sleep(2)
        
        # 2. Iniciar fingerv7 em modo de teste
        print("\n2. Iniciando fingerv7 em modo de teste...")
        print("   Comando: python fingerv7.py")
        
        # Iniciar processo
        process = await asyncio.create_subprocess_exec(
            'python', 'fingerv7.py',
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
            cwd=os.getcwd()
        )
        
        print(f"   ‚úÖ Processo iniciado (PID: {process.pid})")
        
        # 3. Monitorar sa√≠da por 30 segundos
        print("\n3. Monitorando sa√≠da por 30 segundos...")
        
        start_time = time.time()
        timeout = 30
        
        orchestrator_connected = False
        streams_assigned = False
        streams_processing = False
        error_occurred = False
        
        while time.time() - start_time < timeout:
            try:
                # Ler sa√≠da com timeout
                stdout_data = await asyncio.wait_for(
                    process.stdout.readline(), 
                    timeout=1.0
                )
                
                if stdout_data:
                    line = stdout_data.decode('utf-8', errors='ignore').strip()
                    if line:
                        print(f"   üìù {line}")
                        
                        # Verificar marcos importantes
                        if 'orquestrador' in line.lower() or 'orchestrator' in line.lower():
                            if 'conectado' in line.lower() or 'connected' in line.lower() or 'registrado' in line.lower():
                                orchestrator_connected = True
                                print("   ‚úÖ Conex√£o com orquestrador detectada")
                        
                        if 'stream' in line.lower() and ('atribu√≠do' in line.lower() or 'assigned' in line.lower()):
                            streams_assigned = True
                            print("   ‚úÖ Atribui√ß√£o de streams detectada")
                        
                        if 'processando' in line.lower() or 'processing' in line.lower():
                            streams_processing = True
                            print("   ‚úÖ Processamento de streams detectado")
                        
                        if 'erro' in line.lower() or 'error' in line.lower() or 'exception' in line.lower():
                            if 'critical' in line.lower() or 'fatal' in line.lower():
                                error_occurred = True
                                print(f"   ‚ùå Erro cr√≠tico detectado: {line}")
                
                # Verificar se processo ainda est√° rodando
                if process.returncode is not None:
                    print(f"   ‚ö†Ô∏è  Processo terminou com c√≥digo: {process.returncode}")
                    break
                    
            except asyncio.TimeoutError:
                # Timeout normal, continuar
                continue
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Erro ao ler sa√≠da: {e}")
                break
        
        # 4. Parar processo
        print("\n4. Parando processo de teste...")
        try:
            process.terminate()
            await asyncio.wait_for(process.wait(), timeout=5)
            print("   ‚úÖ Processo parado")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Erro ao parar processo: {e}")
            try:
                process.kill()
                await process.wait()
                print("   ‚úÖ Processo for√ßadamente parado")
            except:
                pass
        
        # 5. Avaliar resultados
        print("\n5. Avalia√ß√£o dos resultados:")
        
        success_score = 0
        total_checks = 4
        
        if orchestrator_connected:
            print("   ‚úÖ Conex√£o com orquestrador: OK")
            success_score += 1
        else:
            print("   ‚ùå Conex√£o com orquestrador: FALHOU")
        
        if streams_assigned:
            print("   ‚úÖ Atribui√ß√£o de streams: OK")
            success_score += 1
        else:
            print("   ‚ùå Atribui√ß√£o de streams: FALHOU")
        
        if streams_processing:
            print("   ‚úÖ Processamento de streams: OK")
            success_score += 1
        else:
            print("   ‚ùå Processamento de streams: FALHOU")
        
        if not error_occurred:
            print("   ‚úÖ Sem erros cr√≠ticos: OK")
            success_score += 1
        else:
            print("   ‚ùå Erros cr√≠ticos detectados: FALHOU")
        
        success_rate = (success_score / total_checks) * 100
        print(f"\n   üìä Taxa de sucesso: {success_rate:.1f}% ({success_score}/{total_checks})")
        
        if success_rate >= 75:
            print("   üéâ TESTE PASSOU! fingerv7 est√° funcionando adequadamente")
            return True
        elif success_rate >= 50:
            print("   ‚ö†Ô∏è  TESTE PARCIAL: fingerv7 tem problemas mas est√° funcional")
            return True
        else:
            print("   ‚ùå TESTE FALHOU: fingerv7 tem problemas s√©rios")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro durante teste: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """Executa o teste completo."""
    
    print("üöÄ TESTE REAL DO FINGERV7 COM CORRE√á√ïES APLICADAS\n")
    
    # Verificar se estamos no diret√≥rio correto
    if not os.path.exists('fingerv7.py'):
        print("‚ùå fingerv7.py n√£o encontrado no diret√≥rio atual")
        print(f"   Diret√≥rio atual: {os.getcwd()}")
        return
    
    # Executar teste
    test_success = await test_fingerv7_startup()
    
    if test_success:
        print("\nüéâ TESTE CONCLU√çDO COM SUCESSO!")
        print("   ‚úÖ fingerv7 est√° funcionando com as corre√ß√µes aplicadas")
        print("   ‚úÖ Orquestrador est√° atribuindo streams corretamente")
        print("   ‚úÖ Filtragem de streams est√° funcionando")
        print("\nüìù RECOMENDA√á√ïES:")
        print("   1. O fingerv7 pode ser executado normalmente")
        print("   2. Monitorar logs para identifica√ß√µes musicais")
        print("   3. Verificar m√©tricas de performance")
    else:
        print("\n‚ö†Ô∏è  TESTE REVELOU PROBLEMAS")
        print("   Pode ser necess√°rio investigar mais ou aplicar corre√ß√µes adicionais")
        print("\nüìù PR√ìXIMOS PASSOS:")
        print("   1. Revisar logs detalhados")
        print("   2. Verificar configura√ß√µes")
        print("   3. Testar componentes individuais")

if __name__ == "__main__":
    asyncio.run(main())