#!/bin/bash
# =============================================================================
# SCRIPT DE INICIALIZA√á√ÉO PARA EASYPANEL
# =============================================================================

set -e

echo "üöÄ Iniciando Enhanced Stream Orchestrator no EasyPanel..."

# Fun√ß√£o para aguardar servi√ßo
wait_for_service() {
    local service=$1
    local host=$2
    local port=$3
    local max_attempts=30
    local attempt=1

    echo "‚è≥ Aguardando $service ($host:$port)..."
    
    while [ $attempt -le $max_attempts ]; do
        if nc -z $host $port 2>/dev/null; then
            echo "‚úÖ $service est√° pronto!"
            return 0
        fi
        
        echo "   Tentativa $attempt/$max_attempts - aguardando..."
        sleep 2
        attempt=$((attempt + 1))
    done
    
    echo "‚ùå $service n√£o ficou pronto ap√≥s $max_attempts tentativas"
    return 1
}

# Aguardar PostgreSQL
wait_for_service "PostgreSQL" "localhost" "5432"

# Aguardar Redis
wait_for_service "Redis" "localhost" "6379"

# Executar migrations
echo "üîÑ Executando migrations do banco..."
cd /app

python -c "
import asyncio
import sys
import os
sys.path.append('/app')

# Configurar vari√°veis de ambiente se n√£o estiverem definidas
os.environ.setdefault('DB_HOST', 'localhost')
os.environ.setdefault('DB_PORT', '5432')
os.environ.setdefault('DB_NAME', 'orchestrator')
os.environ.setdefault('DB_USER', 'orchestrator_user')
os.environ.setdefault('DB_PASSWORD', 'orchestrator_pass')

from app.database.migrations import run_migrations

# Configura√ß√£o do banco
DB_CONFIG = {
    'host': os.getenv('DB_HOST'),
    'port': int(os.getenv('DB_PORT', '5432')),
    'database': os.getenv('DB_NAME'),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASSWORD')
}

async def main():
    try:
        print(f'üîó Conectando ao banco: {DB_CONFIG[\"host\"]}:{DB_CONFIG[\"port\"]}/{DB_CONFIG[\"database\"]}')
        await run_migrations(DB_CONFIG)
        print('‚úÖ Migrations executadas com sucesso!')
    except Exception as e:
        print(f'‚ùå Erro nas migrations: {e}')
        import traceback
        traceback.print_exc()
        sys.exit(1)

asyncio.run(main())
"

if [ $? -eq 0 ]; then
    echo "‚úÖ Inicializa√ß√£o do banco conclu√≠da!"
else
    echo "‚ùå Falha na inicializa√ß√£o do banco"
    exit 1
fi

# Verificar se a aplica√ß√£o est√° configurada corretamente
echo "üîç Verificando configura√ß√£o da aplica√ß√£o..."

python -c "
import os
import sys

# Verificar vari√°veis obrigat√≥rias
required_vars = ['SECRET_KEY']
missing_vars = []

for var in required_vars:
    if not os.getenv(var):
        missing_vars.append(var)

if missing_vars:
    print(f'‚ùå Vari√°veis obrigat√≥rias n√£o configuradas: {missing_vars}')
    print('   Configure no painel do EasyPanel!')
    sys.exit(1)

print('‚úÖ Configura√ß√£o da aplica√ß√£o OK!')
"

echo "üéâ Enhanced Stream Orchestrator pronto para iniciar!"
echo "üìä Acesse /health para verificar o status"
echo "üåê Dashboard dispon√≠vel na raiz do dom√≠nio"