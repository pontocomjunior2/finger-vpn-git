# docker-compose.yaml específico para deploy GitHub no EasyPanel
# Este arquivo usa build local ao invés de imagem pré-construída
# Versão com Orquestrador Central para Distribuição de Streams
services:
  # Orquestrador Central - Gerencia distribuição de streams
  orchestrator:
    build:
      context: .
      dockerfile: Dockerfilegit
    command: ["python", "/app/orchestrator.py"]
    ports:
      - "8080:8080"
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - ORCHESTRATOR_HOST=0.0.0.0
      - ORCHESTRATOR_PORT=8080
      - PYTHONUNBUFFERED=1
      - TZ=${TZ:-America/Sao_Paulo}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  gluetun:
    image: qmcgaw/gluetun:latest
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    volumes:
      - gluetun_data:/gluetun
    environment:
      - VPN_SERVICE_PROVIDER=${VPN_SERVICE_PROVIDER:-protonvpn}
      - VPN_TYPE=${VPN_TYPE:-wireguard}
      - SERVER_COUNTRIES=${SERVER_COUNTRIES:-Brazil}
      - WIREGUARD_PRIVATE_KEY=${WIREGUARD_PRIVATE_KEY}
      - OPENVPN_USER=${VPN_USER}
      - OPENVPN_PASSWORD=${VPN_PASSWORD}
      - TZ=${TZ:-America/Sao_Paulo}
    healthcheck:
      test: ["CMD", "/gluetun-entrypoint", "healthcheck"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  finger_app:
    # BUILD LOCAL: EasyPanel irá construir a imagem a partir do Dockerfile na raiz
    build:
      context: .
      dockerfile: Dockerfilegit
    network_mode: "service:gluetun"
    depends_on:
      gluetun:
        condition: service_healthy
      orchestrator:
        condition: service_healthy
    volumes:
      - app_segments:/app/segments
    environment:
      # --- Variáveis da Aplicação (Definidas no EasyPanel) ---
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - DB_TABLE_NAME=${DB_TABLE_NAME:-music_log}
      - SERVER_ID=${SERVER_ID:-1}
      - TOTAL_SERVERS=${TOTAL_SERVERS:-1}
      - DISTRIBUTE_LOAD=${DISTRIBUTE_LOAD:-False}
      - ENABLE_ROTATION=${ENABLE_ROTATION:-False}
      - ROTATION_HOURS=${ROTATION_HOURS:-24}
      - IDENTIFICATION_DURATION=${IDENTIFICATION_DURATION:-15}
      - DUPLICATE_PREVENTION_WINDOW_SECONDS=${DUPLICATE_PREVENTION_WINDOW_SECONDS:-900}
      - SEGMENTS_DIR=/app/segments
      - PYTHONUNBUFFERED=1
      - TZ=${TZ:-America/Sao_Paulo}
      # --- Redis (Heartbeats em tempo real) ---
      - REDIS_URL=${REDIS_URL}
      - REDIS_CHANNEL=${REDIS_CHANNEL:-smf:server_heartbeats}
      - REDIS_KEY_PREFIX=${REDIS_KEY_PREFIX:-smf:server}
      - REDIS_HEARTBEAT_TTL_SECS=${REDIS_HEARTBEAT_TTL_SECS:-60}
      # --- Orquestrador Central ---
      - USE_ORCHESTRATOR=${USE_ORCHESTRATOR:-True}
      - ORCHESTRATOR_URL=${ORCHESTRATOR_URL:-http://orchestrator:8080}
      - INSTANCE_ID=${INSTANCE_ID:-finger_app_1}
      - HEARTBEAT_INTERVAL=${HEARTBEAT_INTERVAL:-30}
      # Adicione outras variáveis que seu fingerv7.py precise ler
    restart: unless-stopped

volumes:
  gluetun_data:
  app_segments: