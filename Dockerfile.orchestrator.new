# Dockerfile para Orchestrator Stream Balancing - EasyPanel Deploy
FROM python:3.11-slim

# Metadados
LABEL maintainer="Orchestrator Team"
LABEL version="1.0.0"
LABEL description="Enhanced Stream Orchestrator with Load Balancing and Resilience"

# Variáveis de ambiente
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONPATH=/app
ENV PORT=8000

# Instalar dependências do sistema
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Criar usuário não-root para segurança
RUN useradd --create-home --shell /bin/bash orchestrator

# Criar diretório da aplicação
WORKDIR /app

# Copiar requirements primeiro para cache de layers
COPY requirements.txt .

# Instalar dependências Python
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copiar código da aplicação
COPY app/ ./app/

# Criar diretórios necessários
RUN mkdir -p /app/logs /app/data /app/tmp && \
    chown -R orchestrator:orchestrator /app

# Criar scripts necessários
RUN echo '#!/bin/bash\nset -e\necho "Starting Enhanced Stream Orchestrator..."\nexport DB_PORT=${DB_PORT:-5432}\nexport ORCHESTRATOR_PORT=${PORT:-8000}\nexport LOG_LEVEL=${LOG_LEVEL:-INFO}\necho "Starting orchestrator on port $ORCHESTRATOR_PORT..."\nexec python app/main_orchestrator.py' > /app/start.sh

# Tornar script executável
RUN chmod +x /app/start.sh

# Criar aplicação principal será copiada do app/

# Health check será usado do app/

# Requirements já copiado acima

# Mudar para usuário não-root
USER orchestrator

# Expor porta
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python /app/app/health_check.py || exit 1

# Comando padrão
CMD ["/app/start.sh"]